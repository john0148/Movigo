/**
 * Authentication API
 * 
 * Cung c·∫•p c√°c h√†m giao ti·∫øp v·ªõi backend API cho c√°c ch·ª©c nƒÉng x√°c th·ª±c:
 * - ƒêƒÉng k√Ω t√†i kho·∫£n
 * - ƒêƒÉng nh·∫≠p
 * - ƒêƒÉng nh·∫≠p b·∫±ng Google
 * - ƒêƒÉng xu·∫•t
 * - L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * - Refresh token
 * 
 * TEMPORARILY MODIFIED FOR DEVELOPMENT: Authentication is bypassed
 */

import axios from 'axios';
import { handleApiError } from '../utils/errorHandler';
import { API_BASE_URL, AUTH_TOKEN_KEY, REFRESH_TOKEN_KEY, TOKEN_EXPIRY_KEY, USER_DATA_KEY } from '../config/constants';
import { setManualLogout } from '../utils/autoLogin';

const API_URL = `${API_BASE_URL}/auth`;

// C·∫•u h√¨nh axios interceptors ƒë·ªÉ t·ª± ƒë·ªông th√™m token v√† x·ª≠ l√Ω token expired
axios.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem(AUTH_TOKEN_KEY);
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

axios.interceptors.response.use(
  (response) => {
    // Check if response contains user data with missing subscription_plan
    if (response.data && response.data.user && !response.data.user.subscription_plan) {
      console.warn('User data from API missing subscription_plan - this should be fixed on the backend');
      console.log('User data before fix:', response.data.user);
    }
    return response;
  },
  async (error) => {
    return Promise.reject(error);
  }
);

/**
 * L∆∞u th√¥ng tin x√°c th·ª±c v√†o localStorage
 * @param {Object} authData D·ªØ li·ªáu x√°c th·ª±c (access_token, refresh_token, expires_in, user)
 */
const setAuthData = (authData) => {
  const { access_token, refresh_token, expires_in, user } = authData;

  // T√≠nh th·ªùi gian token h·∫øt h·∫°n
  const expiryTime = new Date().getTime() + (expires_in || 3600) * 1000;

  localStorage.setItem(AUTH_TOKEN_KEY, access_token);
  localStorage.setItem(REFRESH_TOKEN_KEY, refresh_token || '');
  localStorage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());

  if (user) {
    localStorage.setItem(USER_DATA_KEY, JSON.stringify(user));
  }
};

/**
 * X√≥a th√¥ng tin x√°c th·ª±c kh·ªèi localStorage
 */
const clearAuthData = () => {
  localStorage.removeItem(AUTH_TOKEN_KEY);
  localStorage.removeItem(REFRESH_TOKEN_KEY);
  localStorage.removeItem(TOKEN_EXPIRY_KEY);
  localStorage.removeItem(USER_DATA_KEY);
};

/**
 * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
 * @param {Object} userData D·ªØ li·ªáu ng∆∞·ªùi d√πng (email, password, phone, subscription_type)
 * @returns {Promise<Object>} Ph·∫£n h·ªìi t·ª´ server
 */
export const register = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}/register`, userData);
    return response.data;
  } catch (error) {
    return handleApiError(error, 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
  }
};

/**
 * ƒêƒÉng nh·∫≠p v·ªõi email v√† m·∫≠t kh·∫©u
 * @param {Object} credentials Th√¥ng tin ƒëƒÉng nh·∫≠p (email, password, remember_me)
 * @returns {Promise<Object>} D·ªØ li·ªáu x√°c th·ª±c (access_token, refresh_token, user)
 */
export const login = async (credentials) => {
  try {
    // Clear any existing user data to ensure clean state
    localStorage.removeItem(USER_DATA_KEY);
    // Clear the manual logout flag when user is deliberately logging in
    localStorage.removeItem('manual_logout');

    console.log(`Attempting to login with: ${credentials.email}`);

    // Create FormData to match FastAPI's OAuth2PasswordRequestForm
    const formData = new FormData();
    formData.append('username', credentials.email); // FastAPI expects 'username' even for email
    formData.append('password', credentials.password);

    // Set correct headers for form data
    const config = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    };

    // Convert FormData to URLSearchParams for proper submission
    const params = new URLSearchParams();
    params.append('username', credentials.email);
    params.append('password', credentials.password);

    // G·ªçi API backend v·ªõi form data format
    const response = await axios.post(`${API_URL}/login`, params, config);
    console.log('Login successful with backend API:', response.data);

    // L∆∞u d·ªØ li·ªáu x√°c th·ª±c
    setAuthData(response.data);
    console.log('User data saved to localStorage, user:', response.data.user?.email);

    // For debugging
    const userAfterLogin = localStorage.getItem(USER_DATA_KEY);
    console.log('Verified user data in localStorage:', userAfterLogin ? 'present' : 'missing');

    return response.data;
  } catch (error) {
    // console.error('Login function error:', error);
    // if (error.response?.data?.detail) {
    //   throw new Error(error.response.data.detail);
    // }
    // throw error;
    console.error("üü• L·ªói ƒëƒÉng nh·∫≠p:", error);
    const message = error?.response?.data?.detail || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";
    throw new Error(message);  // r·∫•t quan tr·ªçng
  }
};

/**
 * ƒêƒÉng nh·∫≠p b·∫±ng Google
 * @returns {Promise<Object>} D·ªØ li·ªáu x√°c th·ª±c (access_token, refresh_token, user)
 */
export const loginWithGoogle = async () => {
  try {
    // Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, c·∫ßn kh·ªüi t·∫°o Google OAuth
    // ƒê√¢y l√† phi√™n b·∫£n ƒë∆°n gi·∫£n h√≥a
    const googleAuth = await initializeGoogleAuth();
    const googleToken = await googleAuth.getToken();

    // G·ª≠i token ƒë·∫øn server ƒë·ªÉ x√°c th·ª±c
    const response = await axios.post(`${API_URL}/google`, { token: googleToken });

    setAuthData(response.data);
    return response.data;
  } catch (error) {
    return handleApiError(error, 'ƒêƒÉng nh·∫≠p v·ªõi Google th·∫•t b·∫°i');
  }
};

/**
 * Kh·ªüi t·∫°o Google OAuth
 * ƒê√¢y l√† placeholder cho vi·ªác t√≠ch h·ª£p Google OAuth th·ª±c t·∫ø
 * @returns {Promise<Object>} ƒê·ªëi t∆∞·ª£ng x√°c th·ª±c Google
 */
const initializeGoogleAuth = async () => {
  // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, s·∫Ω s·ª≠ d·ª•ng Google OAuth library
  // ƒê√¢y ch·ªâ l√† placeholder
  console.log('Initializing Google Auth...');

  return {
    getToken: async () => {
      // M√¥ ph·ªèng vi·ªác l·∫•y token t·ª´ Google
      return 'google_token_placeholder';
    }
  };
};

/**
 * Refresh access token
 * @param {string} refreshToken Refresh token hi·ªán t·∫°i
 * @returns {Promise<Object>} Ph·∫£n h·ªìi ch·ª©a token m·ªõi
 */
export const refreshAccessToken = async (refreshToken) => {
  try {
    const response = await axios.post(`${API_URL}/refresh`, { refresh_token: refreshToken });
    return response;
  } catch (error) {
    return handleApiError(error, 'Kh√¥ng th·ªÉ l√†m m·ªõi token');
  }
};

/**
 * ƒêƒÉng xu·∫•t
 * @returns {Promise<void>}
 */
export const logout = async () => {
  try {
    console.log('Logging out user, clearing auth data');

    // Use the setManualLogout function to prevent auto-login
    setManualLogout();

    return true;
  } catch (error) {
    console.error('Error during logout:', error);
    console.log('Logout API call failed, clearing local auth data anyway');

    // Ensure we still set manual logout even if an error occurs
    setManualLogout();
  }
};

/**
 * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 * @returns {Promise<Object>} Th√¥ng tin ng∆∞·ªùi d√πng
 */
export const getCurrentUser = async () => {
  try {
    console.log('Attempting to get current user from backend API');
    const token = localStorage.getItem(AUTH_TOKEN_KEY);

    if (token) {
      const response = await axios.get(`${API_URL}/user/me`);
      console.log('Successfully retrieved user from backend:', response.data);

      // L∆∞u d·ªØ li·ªáu t·ª´ MongoDB v√†o localStorage
      localStorage.setItem(USER_DATA_KEY, JSON.stringify(response.data));
      return response.data;
    }

    // D√πng d·ªØ li·ªáu t·ª´ localStorage n·∫øu c√≥ token nh∆∞ng API th·∫•t b·∫°i
    console.log('No token found, checking localStorage');
    const storedUserData = localStorage.getItem(USER_DATA_KEY);

    if (storedUserData) {
      try {
        const userData = JSON.parse(storedUserData);
        console.log('Found user in localStorage:', userData.email);
        return userData;
      } catch (error) {
        console.error('Error parsing user data from localStorage:', error);
      }
    }

    // N·∫øu kh√¥ng c√≥ user trong localStorage, tr·∫£ v·ªÅ null
    console.log('No user found in localStorage');
    return null;
  } catch (error) {
    console.error('getCurrentUser error:', error);
    // Kh√¥ng throw error ƒë·ªÉ tr√°nh crash app, thay v√†o ƒë√≥ c·ªë g·∫Øng l·∫•y t·ª´ localStorage
    const storedUserData = localStorage.getItem(USER_DATA_KEY);
    if (storedUserData) {
      try {
        return JSON.parse(storedUserData);
      } catch (e) {
        console.error('Error parsing stored user data:', e);
      }
    }
    return null;
  }
};

/**
 * Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
 * @returns {boolean} True n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
 */
export const isAuthenticated = () => {
  try {
    // First check if manual logout flag is set - if so, user is not authenticated
    const manualLogout = localStorage.getItem('manual_logout');
    if (manualLogout) {
      console.log('Manual logout flag is set - user is not authenticated');
      return false;
    }

    // Ki·ªÉm tra token v√† user data trong localStorage
    const token = localStorage.getItem(AUTH_TOKEN_KEY);
    const userData = localStorage.getItem(USER_DATA_KEY);

    return !!(token && userData);
  } catch (error) {
    console.error('Error checking authentication status:', error);
    return false;
  }
};

/**
 * Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi MongoDB
 * @returns {Promise<Object>} K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi
 */
export const checkMongoDBStatus = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/mongodb-status`);
    return response.data;
  } catch (error) {
    console.error('Error checking MongoDB status:', error);
    return {
      status: 'error',
      message: 'Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i MongoDB: ' +
        (error.response?.data?.message || error.message)
    };
  }
}; 